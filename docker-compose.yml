version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "7001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - DatabaseProvider=PostgreSQL
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=EscapeRoomPlannerDb;Username=postgres;Password=EscapeRoom123!
      - ConnectionStrings__Redis=redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - escape-room-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "5173:80"
    depends_on:
      - api
    networks:
      - escape-room-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=EscapeRoomPlannerDb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=EscapeRoom123!
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - escape-room-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - escape-room-network

  # Opcional: PgAdmin para administrar la base de datos
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@escaperoom.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - escape-room-network
    profiles:
      - admin

volumes:
  postgres_data:
  redis_data:

networks:
  escape-room-network:
    driver: bridge