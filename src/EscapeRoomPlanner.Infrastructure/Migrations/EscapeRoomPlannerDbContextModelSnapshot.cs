// <auto-generated />
using System;
using EscapeRoomPlanner.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EscapeRoomPlanner.Infrastructure.Migrations
{
    [DbContext(typeof(EscapeRoomPlannerDbContext))]
    partial class EscapeRoomPlannerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EscapeRoomPlanner.Domain.Entities.DailyRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("EstimatedCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<TimeSpan>("EstimatedTotalTime")
                        .HasColumnType("interval");

                    b.Property<string>("MultiModalStrategy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("SingleMode");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("PreferredTransportMode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Driving");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("PlanId");

                    b.HasIndex("PlanId", "Date")
                        .IsUnique();

                    b.ToTable("DailyRoutes", (string)null);
                });

            modelBuilder.Entity("EscapeRoomPlanner.Domain.Entities.EscapeRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EstimatedDuration")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Difficulty");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("EscapeRooms", (string)null);
                });

            modelBuilder.Entity("EscapeRoomPlanner.Domain.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Status");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("EscapeRoomPlanner.Domain.Entities.RouteStop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DailyRouteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EscapeRoomId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("EstimatedArrivalTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("EstimatedTravelTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsMultiModalSegment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("TransportModeToNext")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DailyRouteId");

                    b.HasIndex("EscapeRoomId");

                    b.HasIndex("DailyRouteId", "EscapeRoomId")
                        .IsUnique();

                    b.HasIndex("DailyRouteId", "Order")
                        .IsUnique();

                    b.ToTable("RouteStops", (string)null);
                });

            modelBuilder.Entity("EscapeRoomPlanner.Domain.Entities.DailyRoute", b =>
                {
                    b.HasOne("EscapeRoomPlanner.Domain.Entities.Plan", null)
                        .WithMany("DailyRoutes")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EscapeRoomPlanner.Domain.Entities.EscapeRoom", b =>
                {
                    b.OwnsOne("EscapeRoomPlanner.Domain.Entities.ContactInfo", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("EscapeRoomId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("ContactInfo_Email");

                            b1.Property<string>("Phone")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("ContactInfo_Phone");

                            b1.Property<string>("Website")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("ContactInfo_Website");

                            b1.HasKey("EscapeRoomId");

                            b1.ToTable("EscapeRooms");

                            b1.WithOwner()
                                .HasForeignKey("EscapeRoomId");
                        });

                    b.OwnsOne("EscapeRoomPlanner.Domain.Entities.GooglePlacesInfo", "GooglePlacesInfo", b1 =>
                        {
                            b1.Property<Guid>("EscapeRoomId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("LastUpdated")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("GooglePlaces_LastUpdated");

                            b1.Property<string>("PlaceId")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("GooglePlaces_PlaceId");

                            b1.Property<double>("Rating")
                                .HasPrecision(3, 2)
                                .HasColumnType("double precision")
                                .HasColumnName("GooglePlaces_Rating");

                            b1.Property<int>("ReviewCount")
                                .HasColumnType("integer")
                                .HasColumnName("GooglePlaces_ReviewCount");

                            b1.HasKey("EscapeRoomId");

                            b1.ToTable("EscapeRooms");

                            b1.WithOwner()
                                .HasForeignKey("EscapeRoomId");
                        });

                    b.OwnsOne("EscapeRoomPlanner.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("EscapeRoomId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Address_Country");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("Address_PostalCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Address_Street");

                            b1.HasKey("EscapeRoomId");

                            b1.ToTable("EscapeRooms");

                            b1.WithOwner()
                                .HasForeignKey("EscapeRoomId");
                        });

                    b.OwnsOne("EscapeRoomPlanner.Domain.ValueObjects.Coordinates", "Location", b1 =>
                        {
                            b1.Property<Guid>("EscapeRoomId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Latitude")
                                .HasPrecision(10, 8)
                                .HasColumnType("double precision")
                                .HasColumnName("Location_Latitude");

                            b1.Property<double>("Longitude")
                                .HasPrecision(11, 8)
                                .HasColumnType("double precision")
                                .HasColumnName("Location_Longitude");

                            b1.HasKey("EscapeRoomId");

                            b1.ToTable("EscapeRooms");

                            b1.WithOwner()
                                .HasForeignKey("EscapeRoomId");
                        });

                    b.OwnsOne("EscapeRoomPlanner.Domain.ValueObjects.PriceRange", "PriceRange", b1 =>
                        {
                            b1.Property<Guid>("EscapeRoomId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("PriceRange_Currency");

                            b1.Property<decimal>("MaxPrice")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("PriceRange_MaxPrice");

                            b1.Property<decimal>("MinPrice")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("PriceRange_MinPrice");

                            b1.HasKey("EscapeRoomId");

                            b1.ToTable("EscapeRooms");

                            b1.WithOwner()
                                .HasForeignKey("EscapeRoomId");
                        });

                    b.OwnsOne("EscapeRoomPlanner.Domain.ValueObjects.Schedule", "Schedule", b1 =>
                        {
                            b1.Property<Guid>("EscapeRoomId")
                                .HasColumnType("uuid");

                            b1.Property<string>("SpecialDates")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("Schedule_SpecialDates");

                            b1.Property<string>("WeeklySchedule")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("Schedule_WeeklySchedule");

                            b1.HasKey("EscapeRoomId");

                            b1.ToTable("EscapeRooms");

                            b1.WithOwner()
                                .HasForeignKey("EscapeRoomId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactInfo")
                        .IsRequired();

                    b.Navigation("GooglePlacesInfo");

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("PriceRange")
                        .IsRequired();

                    b.Navigation("Schedule")
                        .IsRequired();
                });

            modelBuilder.Entity("EscapeRoomPlanner.Domain.Entities.RouteStop", b =>
                {
                    b.HasOne("EscapeRoomPlanner.Domain.Entities.DailyRoute", null)
                        .WithMany("Stops")
                        .HasForeignKey("DailyRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EscapeRoomPlanner.Domain.Entities.EscapeRoom", null)
                        .WithMany()
                        .HasForeignKey("EscapeRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EscapeRoomPlanner.Domain.Entities.DailyRoute", b =>
                {
                    b.Navigation("Stops");
                });

            modelBuilder.Entity("EscapeRoomPlanner.Domain.Entities.Plan", b =>
                {
                    b.Navigation("DailyRoutes");
                });
#pragma warning restore 612, 618
        }
    }
}
